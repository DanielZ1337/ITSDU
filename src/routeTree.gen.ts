/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as CalendarImport } from './routes/calendar'
import { Route as ProfileRouteImport } from './routes/profile.route'
import { Route as OverviewRouteImport } from './routes/overview.route'
import { Route as MergeZipDocumentsRouteImport } from './routes/merge-zip-documents.route'
import { Route as IndexRouteImport } from './routes/index.route'
import { Route as UpdatesIndexRouteImport } from './routes/updates/index.route'
import { Route as MessagesIndexRouteImport } from './routes/messages/index.route'
import { Route as CoursesIdImport } from './routes/courses.$id'
import { Route as UpdatesIdRouteImport } from './routes/updates/$id.route'
import { Route as PersonIdRouteImport } from './routes/person.$id.route'
import { Route as MessagesIdRouteImport } from './routes/messages/$id.route'
import { Route as CoursesIdIndexRouteImport } from './routes/courses/$id/index.route'
import { Route as CoursesIdUpdatesRouteImport } from './routes/courses/$id/updates.route'
import { Route as CoursesIdTasksRouteImport } from './routes/courses/$id/tasks.route'
import { Route as CoursesIdScheduleRouteImport } from './routes/courses/$id/schedule.route'
import { Route as CoursesIdResourcesRouteImport } from './routes/courses/$id/resources.route'
import { Route as CoursesIdPlansRouteImport } from './routes/courses/$id/plans.route'
import { Route as CoursesIdParticipantsRouteImport } from './routes/courses/$id/participants.route'
import { Route as CoursesIdInfoRouteImport } from './routes/courses/$id/info.route'
import { Route as CoursesIdResourcesFolderIdRouteImport } from './routes/courses/$id/resources.$folderId.route'

// Create/Update Routes

const CalendarRoute = CalendarImport.update({
  path: '/calendar',
  getParentRoute: () => rootRoute,
} as any)

const ProfileRouteRoute = ProfileRouteImport.update({
  path: '/profile',
  getParentRoute: () => rootRoute,
} as any)

const OverviewRouteRoute = OverviewRouteImport.update({
  path: '/overview',
  getParentRoute: () => rootRoute,
} as any)

const MergeZipDocumentsRouteRoute = MergeZipDocumentsRouteImport.update({
  path: '/merge-zip-documents',
  getParentRoute: () => rootRoute,
} as any)

const IndexRouteRoute = IndexRouteImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const UpdatesIndexRouteRoute = UpdatesIndexRouteImport.update({
  path: '/updates/',
  getParentRoute: () => rootRoute,
} as any)

const MessagesIndexRouteRoute = MessagesIndexRouteImport.update({
  path: '/messages/',
  getParentRoute: () => rootRoute,
} as any)

const CoursesIdRoute = CoursesIdImport.update({
  path: '/courses/$id',
  getParentRoute: () => rootRoute,
} as any)

const UpdatesIdRouteRoute = UpdatesIdRouteImport.update({
  path: '/updates/$id',
  getParentRoute: () => rootRoute,
} as any)

const PersonIdRouteRoute = PersonIdRouteImport.update({
  path: '/person/$id',
  getParentRoute: () => rootRoute,
} as any)

const MessagesIdRouteRoute = MessagesIdRouteImport.update({
  path: '/messages/$id',
  getParentRoute: () => rootRoute,
} as any)

const CoursesIdIndexRouteRoute = CoursesIdIndexRouteImport.update({
  path: '/',
  getParentRoute: () => CoursesIdRoute,
} as any)

const CoursesIdUpdatesRouteRoute = CoursesIdUpdatesRouteImport.update({
  path: '/updates',
  getParentRoute: () => CoursesIdRoute,
} as any)

const CoursesIdTasksRouteRoute = CoursesIdTasksRouteImport.update({
  path: '/tasks',
  getParentRoute: () => CoursesIdRoute,
} as any)

const CoursesIdScheduleRouteRoute = CoursesIdScheduleRouteImport.update({
  path: '/schedule',
  getParentRoute: () => CoursesIdRoute,
} as any)

const CoursesIdResourcesRouteRoute = CoursesIdResourcesRouteImport.update({
  path: '/resources',
  getParentRoute: () => CoursesIdRoute,
} as any)

const CoursesIdPlansRouteRoute = CoursesIdPlansRouteImport.update({
  path: '/plans',
  getParentRoute: () => CoursesIdRoute,
} as any)

const CoursesIdParticipantsRouteRoute = CoursesIdParticipantsRouteImport.update(
  {
    path: '/participants',
    getParentRoute: () => CoursesIdRoute,
  } as any,
)

const CoursesIdInfoRouteRoute = CoursesIdInfoRouteImport.update({
  path: '/info',
  getParentRoute: () => CoursesIdRoute,
} as any)

const CoursesIdResourcesFolderIdRouteRoute =
  CoursesIdResourcesFolderIdRouteImport.update({
    path: '/$folderId',
    getParentRoute: () => CoursesIdResourcesRouteRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRoute
    }
    '/merge-zip-documents': {
      id: '/merge-zip-documents'
      path: '/merge-zip-documents'
      fullPath: '/merge-zip-documents'
      preLoaderRoute: typeof MergeZipDocumentsRouteImport
      parentRoute: typeof rootRoute
    }
    '/overview': {
      id: '/overview'
      path: '/overview'
      fullPath: '/overview'
      preLoaderRoute: typeof OverviewRouteImport
      parentRoute: typeof rootRoute
    }
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileRouteImport
      parentRoute: typeof rootRoute
    }
    '/calendar': {
      id: '/calendar'
      path: '/calendar'
      fullPath: '/calendar'
      preLoaderRoute: typeof CalendarImport
      parentRoute: typeof rootRoute
    }
    '/messages/$id': {
      id: '/messages/$id'
      path: '/messages/$id'
      fullPath: '/messages/$id'
      preLoaderRoute: typeof MessagesIdRouteImport
      parentRoute: typeof rootRoute
    }
    '/person/$id': {
      id: '/person/$id'
      path: '/person/$id'
      fullPath: '/person/$id'
      preLoaderRoute: typeof PersonIdRouteImport
      parentRoute: typeof rootRoute
    }
    '/updates/$id': {
      id: '/updates/$id'
      path: '/updates/$id'
      fullPath: '/updates/$id'
      preLoaderRoute: typeof UpdatesIdRouteImport
      parentRoute: typeof rootRoute
    }
    '/courses/$id': {
      id: '/courses/$id'
      path: '/courses/$id'
      fullPath: '/courses/$id'
      preLoaderRoute: typeof CoursesIdImport
      parentRoute: typeof rootRoute
    }
    '/messages/': {
      id: '/messages/'
      path: '/messages'
      fullPath: '/messages'
      preLoaderRoute: typeof MessagesIndexRouteImport
      parentRoute: typeof rootRoute
    }
    '/updates/': {
      id: '/updates/'
      path: '/updates'
      fullPath: '/updates'
      preLoaderRoute: typeof UpdatesIndexRouteImport
      parentRoute: typeof rootRoute
    }
    '/courses/$id/info': {
      id: '/courses/$id/info'
      path: '/info'
      fullPath: '/courses/$id/info'
      preLoaderRoute: typeof CoursesIdInfoRouteImport
      parentRoute: typeof CoursesIdImport
    }
    '/courses/$id/participants': {
      id: '/courses/$id/participants'
      path: '/participants'
      fullPath: '/courses/$id/participants'
      preLoaderRoute: typeof CoursesIdParticipantsRouteImport
      parentRoute: typeof CoursesIdImport
    }
    '/courses/$id/plans': {
      id: '/courses/$id/plans'
      path: '/plans'
      fullPath: '/courses/$id/plans'
      preLoaderRoute: typeof CoursesIdPlansRouteImport
      parentRoute: typeof CoursesIdImport
    }
    '/courses/$id/resources': {
      id: '/courses/$id/resources'
      path: '/resources'
      fullPath: '/courses/$id/resources'
      preLoaderRoute: typeof CoursesIdResourcesRouteImport
      parentRoute: typeof CoursesIdImport
    }
    '/courses/$id/schedule': {
      id: '/courses/$id/schedule'
      path: '/schedule'
      fullPath: '/courses/$id/schedule'
      preLoaderRoute: typeof CoursesIdScheduleRouteImport
      parentRoute: typeof CoursesIdImport
    }
    '/courses/$id/tasks': {
      id: '/courses/$id/tasks'
      path: '/tasks'
      fullPath: '/courses/$id/tasks'
      preLoaderRoute: typeof CoursesIdTasksRouteImport
      parentRoute: typeof CoursesIdImport
    }
    '/courses/$id/updates': {
      id: '/courses/$id/updates'
      path: '/updates'
      fullPath: '/courses/$id/updates'
      preLoaderRoute: typeof CoursesIdUpdatesRouteImport
      parentRoute: typeof CoursesIdImport
    }
    '/courses/$id/': {
      id: '/courses/$id/'
      path: '/'
      fullPath: '/courses/$id/'
      preLoaderRoute: typeof CoursesIdIndexRouteImport
      parentRoute: typeof CoursesIdImport
    }
    '/courses/$id/resources/$folderId': {
      id: '/courses/$id/resources/$folderId'
      path: '/$folderId'
      fullPath: '/courses/$id/resources/$folderId'
      preLoaderRoute: typeof CoursesIdResourcesFolderIdRouteImport
      parentRoute: typeof CoursesIdResourcesRouteImport
    }
  }
}

// Create and export the route tree

interface CoursesIdResourcesRouteRouteChildren {
  CoursesIdResourcesFolderIdRouteRoute: typeof CoursesIdResourcesFolderIdRouteRoute
}

const CoursesIdResourcesRouteRouteChildren: CoursesIdResourcesRouteRouteChildren =
  {
    CoursesIdResourcesFolderIdRouteRoute: CoursesIdResourcesFolderIdRouteRoute,
  }

const CoursesIdResourcesRouteRouteWithChildren =
  CoursesIdResourcesRouteRoute._addFileChildren(
    CoursesIdResourcesRouteRouteChildren,
  )

interface CoursesIdRouteChildren {
  CoursesIdInfoRouteRoute: typeof CoursesIdInfoRouteRoute
  CoursesIdParticipantsRouteRoute: typeof CoursesIdParticipantsRouteRoute
  CoursesIdPlansRouteRoute: typeof CoursesIdPlansRouteRoute
  CoursesIdResourcesRouteRoute: typeof CoursesIdResourcesRouteRouteWithChildren
  CoursesIdScheduleRouteRoute: typeof CoursesIdScheduleRouteRoute
  CoursesIdTasksRouteRoute: typeof CoursesIdTasksRouteRoute
  CoursesIdUpdatesRouteRoute: typeof CoursesIdUpdatesRouteRoute
  CoursesIdIndexRouteRoute: typeof CoursesIdIndexRouteRoute
}

const CoursesIdRouteChildren: CoursesIdRouteChildren = {
  CoursesIdInfoRouteRoute: CoursesIdInfoRouteRoute,
  CoursesIdParticipantsRouteRoute: CoursesIdParticipantsRouteRoute,
  CoursesIdPlansRouteRoute: CoursesIdPlansRouteRoute,
  CoursesIdResourcesRouteRoute: CoursesIdResourcesRouteRouteWithChildren,
  CoursesIdScheduleRouteRoute: CoursesIdScheduleRouteRoute,
  CoursesIdTasksRouteRoute: CoursesIdTasksRouteRoute,
  CoursesIdUpdatesRouteRoute: CoursesIdUpdatesRouteRoute,
  CoursesIdIndexRouteRoute: CoursesIdIndexRouteRoute,
}

const CoursesIdRouteWithChildren = CoursesIdRoute._addFileChildren(
  CoursesIdRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRouteRoute
  '/merge-zip-documents': typeof MergeZipDocumentsRouteRoute
  '/overview': typeof OverviewRouteRoute
  '/profile': typeof ProfileRouteRoute
  '/calendar': typeof CalendarRoute
  '/messages/$id': typeof MessagesIdRouteRoute
  '/person/$id': typeof PersonIdRouteRoute
  '/updates/$id': typeof UpdatesIdRouteRoute
  '/courses/$id': typeof CoursesIdRouteWithChildren
  '/messages': typeof MessagesIndexRouteRoute
  '/updates': typeof UpdatesIndexRouteRoute
  '/courses/$id/info': typeof CoursesIdInfoRouteRoute
  '/courses/$id/participants': typeof CoursesIdParticipantsRouteRoute
  '/courses/$id/plans': typeof CoursesIdPlansRouteRoute
  '/courses/$id/resources': typeof CoursesIdResourcesRouteRouteWithChildren
  '/courses/$id/schedule': typeof CoursesIdScheduleRouteRoute
  '/courses/$id/tasks': typeof CoursesIdTasksRouteRoute
  '/courses/$id/updates': typeof CoursesIdUpdatesRouteRoute
  '/courses/$id/': typeof CoursesIdIndexRouteRoute
  '/courses/$id/resources/$folderId': typeof CoursesIdResourcesFolderIdRouteRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRouteRoute
  '/merge-zip-documents': typeof MergeZipDocumentsRouteRoute
  '/overview': typeof OverviewRouteRoute
  '/profile': typeof ProfileRouteRoute
  '/calendar': typeof CalendarRoute
  '/messages/$id': typeof MessagesIdRouteRoute
  '/person/$id': typeof PersonIdRouteRoute
  '/updates/$id': typeof UpdatesIdRouteRoute
  '/messages': typeof MessagesIndexRouteRoute
  '/updates': typeof UpdatesIndexRouteRoute
  '/courses/$id/info': typeof CoursesIdInfoRouteRoute
  '/courses/$id/participants': typeof CoursesIdParticipantsRouteRoute
  '/courses/$id/plans': typeof CoursesIdPlansRouteRoute
  '/courses/$id/resources': typeof CoursesIdResourcesRouteRouteWithChildren
  '/courses/$id/schedule': typeof CoursesIdScheduleRouteRoute
  '/courses/$id/tasks': typeof CoursesIdTasksRouteRoute
  '/courses/$id/updates': typeof CoursesIdUpdatesRouteRoute
  '/courses/$id': typeof CoursesIdIndexRouteRoute
  '/courses/$id/resources/$folderId': typeof CoursesIdResourcesFolderIdRouteRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRouteRoute
  '/merge-zip-documents': typeof MergeZipDocumentsRouteRoute
  '/overview': typeof OverviewRouteRoute
  '/profile': typeof ProfileRouteRoute
  '/calendar': typeof CalendarRoute
  '/messages/$id': typeof MessagesIdRouteRoute
  '/person/$id': typeof PersonIdRouteRoute
  '/updates/$id': typeof UpdatesIdRouteRoute
  '/courses/$id': typeof CoursesIdRouteWithChildren
  '/messages/': typeof MessagesIndexRouteRoute
  '/updates/': typeof UpdatesIndexRouteRoute
  '/courses/$id/info': typeof CoursesIdInfoRouteRoute
  '/courses/$id/participants': typeof CoursesIdParticipantsRouteRoute
  '/courses/$id/plans': typeof CoursesIdPlansRouteRoute
  '/courses/$id/resources': typeof CoursesIdResourcesRouteRouteWithChildren
  '/courses/$id/schedule': typeof CoursesIdScheduleRouteRoute
  '/courses/$id/tasks': typeof CoursesIdTasksRouteRoute
  '/courses/$id/updates': typeof CoursesIdUpdatesRouteRoute
  '/courses/$id/': typeof CoursesIdIndexRouteRoute
  '/courses/$id/resources/$folderId': typeof CoursesIdResourcesFolderIdRouteRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/merge-zip-documents'
    | '/overview'
    | '/profile'
    | '/calendar'
    | '/messages/$id'
    | '/person/$id'
    | '/updates/$id'
    | '/courses/$id'
    | '/messages'
    | '/updates'
    | '/courses/$id/info'
    | '/courses/$id/participants'
    | '/courses/$id/plans'
    | '/courses/$id/resources'
    | '/courses/$id/schedule'
    | '/courses/$id/tasks'
    | '/courses/$id/updates'
    | '/courses/$id/'
    | '/courses/$id/resources/$folderId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/merge-zip-documents'
    | '/overview'
    | '/profile'
    | '/calendar'
    | '/messages/$id'
    | '/person/$id'
    | '/updates/$id'
    | '/messages'
    | '/updates'
    | '/courses/$id/info'
    | '/courses/$id/participants'
    | '/courses/$id/plans'
    | '/courses/$id/resources'
    | '/courses/$id/schedule'
    | '/courses/$id/tasks'
    | '/courses/$id/updates'
    | '/courses/$id'
    | '/courses/$id/resources/$folderId'
  id:
    | '__root__'
    | '/'
    | '/merge-zip-documents'
    | '/overview'
    | '/profile'
    | '/calendar'
    | '/messages/$id'
    | '/person/$id'
    | '/updates/$id'
    | '/courses/$id'
    | '/messages/'
    | '/updates/'
    | '/courses/$id/info'
    | '/courses/$id/participants'
    | '/courses/$id/plans'
    | '/courses/$id/resources'
    | '/courses/$id/schedule'
    | '/courses/$id/tasks'
    | '/courses/$id/updates'
    | '/courses/$id/'
    | '/courses/$id/resources/$folderId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRouteRoute: typeof IndexRouteRoute
  MergeZipDocumentsRouteRoute: typeof MergeZipDocumentsRouteRoute
  OverviewRouteRoute: typeof OverviewRouteRoute
  ProfileRouteRoute: typeof ProfileRouteRoute
  CalendarRoute: typeof CalendarRoute
  MessagesIdRouteRoute: typeof MessagesIdRouteRoute
  PersonIdRouteRoute: typeof PersonIdRouteRoute
  UpdatesIdRouteRoute: typeof UpdatesIdRouteRoute
  CoursesIdRoute: typeof CoursesIdRouteWithChildren
  MessagesIndexRouteRoute: typeof MessagesIndexRouteRoute
  UpdatesIndexRouteRoute: typeof UpdatesIndexRouteRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRouteRoute: IndexRouteRoute,
  MergeZipDocumentsRouteRoute: MergeZipDocumentsRouteRoute,
  OverviewRouteRoute: OverviewRouteRoute,
  ProfileRouteRoute: ProfileRouteRoute,
  CalendarRoute: CalendarRoute,
  MessagesIdRouteRoute: MessagesIdRouteRoute,
  PersonIdRouteRoute: PersonIdRouteRoute,
  UpdatesIdRouteRoute: UpdatesIdRouteRoute,
  CoursesIdRoute: CoursesIdRouteWithChildren,
  MessagesIndexRouteRoute: MessagesIndexRouteRoute,
  UpdatesIndexRouteRoute: UpdatesIndexRouteRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/merge-zip-documents",
        "/overview",
        "/profile",
        "/calendar",
        "/messages/$id",
        "/person/$id",
        "/updates/$id",
        "/courses/$id",
        "/messages/",
        "/updates/"
      ]
    },
    "/": {
      "filePath": "index.route.tsx"
    },
    "/merge-zip-documents": {
      "filePath": "merge-zip-documents.route.tsx"
    },
    "/overview": {
      "filePath": "overview.route.tsx"
    },
    "/profile": {
      "filePath": "profile.route.tsx"
    },
    "/calendar": {
      "filePath": "calendar.tsx"
    },
    "/messages/$id": {
      "filePath": "messages/$id.route.tsx"
    },
    "/person/$id": {
      "filePath": "person.$id.route.tsx"
    },
    "/updates/$id": {
      "filePath": "updates/$id.route.tsx"
    },
    "/courses/$id": {
      "filePath": "courses.$id.tsx",
      "children": [
        "/courses/$id/info",
        "/courses/$id/participants",
        "/courses/$id/plans",
        "/courses/$id/resources",
        "/courses/$id/schedule",
        "/courses/$id/tasks",
        "/courses/$id/updates",
        "/courses/$id/"
      ]
    },
    "/messages/": {
      "filePath": "messages/index.route.tsx"
    },
    "/updates/": {
      "filePath": "updates/index.route.tsx"
    },
    "/courses/$id/info": {
      "filePath": "courses/$id/info.route.tsx",
      "parent": "/courses/$id"
    },
    "/courses/$id/participants": {
      "filePath": "courses/$id/participants.route.tsx",
      "parent": "/courses/$id"
    },
    "/courses/$id/plans": {
      "filePath": "courses/$id/plans.route.tsx",
      "parent": "/courses/$id"
    },
    "/courses/$id/resources": {
      "filePath": "courses/$id/resources.route.tsx",
      "parent": "/courses/$id",
      "children": [
        "/courses/$id/resources/$folderId"
      ]
    },
    "/courses/$id/schedule": {
      "filePath": "courses/$id/schedule.route.tsx",
      "parent": "/courses/$id"
    },
    "/courses/$id/tasks": {
      "filePath": "courses/$id/tasks.route.tsx",
      "parent": "/courses/$id"
    },
    "/courses/$id/updates": {
      "filePath": "courses/$id/updates.route.tsx",
      "parent": "/courses/$id"
    },
    "/courses/$id/": {
      "filePath": "courses/$id/index.route.tsx",
      "parent": "/courses/$id"
    },
    "/courses/$id/resources/$folderId": {
      "filePath": "courses/$id/resources.$folderId.route.tsx",
      "parent": "/courses/$id/resources"
    }
  }
}
ROUTE_MANIFEST_END */
